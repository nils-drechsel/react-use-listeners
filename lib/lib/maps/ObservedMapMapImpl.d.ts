import { ObservedMapMap } from "../interfaces/ObservedMapMap";
import { AnySubIdListeners, SubIdListeners, SubIdListenerCallback, UnsubscribeCallback, AnyListeners } from "../Listeners";
export declare class ObservedMapMapImpl<T> implements ObservedMapMap<T> {
    map: Map<string, Map<string, T>>;
    subIdListeners: SubIdListeners;
    anySubIdListeners: AnySubIdListeners;
    anyListeners: AnyListeners;
    autoRemoveIds: boolean;
    size: number;
    constructor(autoRemoveIds?: boolean);
    getMap(id: string): Map<string, T> | undefined;
    addSubIdListener(id: string, subId: string, listener: SubIdListenerCallback): UnsubscribeCallback;
    addAnySubIdListener(id: string, listener: SubIdListenerCallback): UnsubscribeCallback;
    addAnyListener(listener: SubIdListenerCallback): UnsubscribeCallback;
    has(id: string): boolean;
    hasSub(id: string, subId: string): boolean;
    getSub(id: string, subId: string): T | undefined;
    getSubIds(id: string): Set<string>;
    forEach(callback: (value: T, id: string, subId: string) => void): void;
    forEachSub(id: string, callback: (value: T, key: string) => void): void;
    awaitForEachSub(id: string, callback: (value: T, key: string) => Promise<void>): void;
    keys(): IterableIterator<string>;
    keysSub(id: string): IterableIterator<string>;
    valuesSub(id: string): IterableIterator<T>;
    sizeSub(id: string): number;
    private updateSize;
    private notify;
    setSub(id: string, subId: string, data: T): this;
    delete(id: string): void;
    deleteSub(id: string, subId: string): void;
    modifySub(id: string, subId: string, data?: Object): void;
}
