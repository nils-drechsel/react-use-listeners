import { ObservedMapMap } from "../interfaces/ObservedMapMap";
import { ObservedMapMapMirror } from "../interfaces/ObservedMapMapMirror";
import { SubIdListenerCallback, UnsubscribeCallback } from "../Listeners";
export declare class ObservedMapMapMirrorImpl<CONTENT> implements ObservedMapMapMirror<CONTENT> {
    private map;
    private observedIds;
    constructor(map: ObservedMapMap<CONTENT>);
    [Symbol.iterator](): IterableIterator<[string, CONTENT]>;
    entries(): IterableIterator<[string, CONTENT]>;
    [Symbol.toStringTag]: string;
    addSubIdListener(id: string, subId: string, listener: SubIdListenerCallback): UnsubscribeCallback;
    addAnySubIdListener(id: string, listener: SubIdListenerCallback): UnsubscribeCallback;
    addAnyListener(listener: SubIdListenerCallback): UnsubscribeCallback;
    private getSubValues;
    hasSub(id: string, subId: string): boolean;
    getSub(id: string, subId: string): CONTENT | undefined;
    forEach(callback: (value: CONTENT, id: string, subId: string) => void): void;
    forEachSub(id: string, callback: (value: CONTENT, key: string) => void): void;
    awaitForEachSub(id: string, callback: (value: CONTENT, key: string) => Promise<void>): void;
    keys(): IterableIterator<string>;
    keysSub(id: string): IterableIterator<string>;
    valuesSub(id: string): IterableIterator<CONTENT>;
    sizeSub(id: string): number;
    setSub(id: string, subId: string, data: CONTENT): void;
    deleteSub(id: string, subId: string): void;
    modifySub(id: string, subId: string, data?: Object): void;
    has(id: string): boolean;
    getSubIds(id: string): Set<string>;
    delete(id: string): void;
    addObservedId(id: string, subId?: string): void;
    deleteObservedId(id: string, subId?: string): void;
    getObservedIds(): Array<string>;
    getObservedSubIds(id: string): Array<string>;
}
