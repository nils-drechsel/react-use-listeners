"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
require("mocha");
const ObservedMapMapImpl_1 = require("../maps/ObservedMapMapImpl");
const ObservedMapMapMirrorImpl_1 = require("./ObservedMapMapMirrorImpl");
describe("ObservedMapMapMirror", () => {
    it("sub id listeners", () => {
        const map = new ObservedMapMapImpl_1.ObservedMapMapImpl();
        const mirror = new ObservedMapMapMirrorImpl_1.ObservedMapMapMirrorImpl(map);
        let test = 0;
        const unsubscribe = mirror.addSubIdListener("test0", "sub0", () => {
            test = test + 1;
        });
        map.setSub("test0", "sub0", "text0");
        chai_1.expect(test).to.equal(0);
        mirror.addObservedId("test0", "sub0");
        map.modifySub("test0", "sub0");
        chai_1.expect(test).to.equal(1);
        mirror.deleteSub("test0", "sub0");
        chai_1.expect(test).to.equal(2);
        mirror.deleteObservedId("test0", "sub0");
        mirror.setSub("test0", "sub0", "text1");
        chai_1.expect(test).to.equal(2);
        unsubscribe();
        mirror.delete("test0");
        chai_1.expect(test).to.equal(2);
        mirror.addObservedId("test0", "sub1");
        map.setSub("test0", "sub1", "text2");
        chai_1.expect(mirror.hasSub("test0", "sub1")).to.be.true;
        mirror.deleteObservedId("test0", "sub1");
        chai_1.expect(mirror.hasSub("test0", "sub1")).to.be.false;
    });
    it("any sub id listeners", () => {
        const map = new ObservedMapMapImpl_1.ObservedMapMapImpl();
        const mirror = new ObservedMapMapMirrorImpl_1.ObservedMapMapMirrorImpl(map);
        let test = 0;
        const unsubscribe = mirror.addAnySubIdListener("test0", () => {
            test = test + 1;
        });
        map.setSub("test0", "sub0", "text0");
        chai_1.expect(test).to.equal(0);
        mirror.addObservedId("test0", "sub0");
        map.modifySub("test0", "sub0");
        chai_1.expect(test).to.equal(1);
        map.setSub("test0", "sub1", "text3");
        chai_1.expect(test).to.equal(1);
        mirror.deleteSub("test0", "sub0");
        chai_1.expect(test).to.equal(2);
        mirror.addObservedId("test0", "sub1");
        mirror.deleteSub("test0", "sub1");
        chai_1.expect(test).to.equal(3);
        mirror.deleteObservedId("test0", "sub0");
        mirror.deleteObservedId("test0", "sub1");
        mirror.setSub("test0", "sub0", "text1");
        chai_1.expect(test).to.equal(3);
        unsubscribe();
        mirror.delete("test0");
        chai_1.expect(test).to.equal(3);
        mirror.addObservedId("test0", "sub1");
        map.setSub("test0", "sub1", "text2");
        chai_1.expect(mirror.hasSub("test0", "sub1")).to.be.true;
        mirror.deleteObservedId("test0", "sub1");
        chai_1.expect(mirror.hasSub("test0", "sub1")).to.be.false;
    });
    it("any listeners", () => {
        const map = new ObservedMapMapImpl_1.ObservedMapMapImpl();
        const mirror = new ObservedMapMapMirrorImpl_1.ObservedMapMapMirrorImpl(map);
        let test = 0;
        const unsubscribe = mirror.addAnyListener(() => {
            test = test + 1;
        });
        map.setSub("test0", "sub0", "text0");
        chai_1.expect(test).to.equal(0);
        mirror.addObservedId("test0", "sub0");
        map.modifySub("test0", "sub0");
        chai_1.expect(test).to.equal(1);
        map.setSub("test0", "sub1", "text3");
        chai_1.expect(test).to.equal(1);
        mirror.deleteSub("test0", "sub0");
        chai_1.expect(test).to.equal(2);
        mirror.addObservedId("test0", "sub1");
        mirror.deleteSub("test0", "sub1");
        chai_1.expect(test).to.equal(3);
        mirror.deleteObservedId("test0", "sub0");
        mirror.deleteObservedId("test0", "sub1");
        mirror.setSub("test0", "sub0", "text1");
        chai_1.expect(test).to.equal(3);
        unsubscribe();
        mirror.delete("test0");
        chai_1.expect(test).to.equal(3);
        mirror.addObservedId("test0", "sub1");
        map.setSub("test0", "sub1", "text2");
        chai_1.expect(mirror.hasSub("test0", "sub1")).to.be.true;
        mirror.deleteObservedId("test0", "sub1");
        chai_1.expect(mirror.hasSub("test0", "sub1")).to.be.false;
    });
});
//# sourceMappingURL=ObservedMapMapMirror.spec.js.map